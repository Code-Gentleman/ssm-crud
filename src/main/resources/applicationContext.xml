<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd "

>

    <context:component-scan base-package="wang.l1n">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--Spring的配置文件，这里主要配置和业务逻辑相关的-->

    <!--数据源，事务控制-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
    <!--        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>-->
    <!--        <property name="driverClass" value="${jdbc.driverClass}"/>-->
    <!--        <property name="user" value="${jdbc.user}"/>-->
    <!--        <property name="password" value="${jdbc.password}"/>-->
    <!--    </bean>-->

    <!-- 数据源配置, 使用 Druid 数据库连接池 -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driverClass}"/>

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.jdbcUrl}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}"/>
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

    <!--配置和mybatis的整合-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定Mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--数据源-->
        <property name="dataSource" ref="druidDataSource"/>
        <!--配置mapper-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--配置扫描器 将mybatis接口的实现加到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有的dao接口的实现，加到ioc容器中-->
        <property name="basePackage" value="wang.l1n.dao"/>
    </bean>

    <!--配置一个可以批量执行的sql session-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!--    配置shiro-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManger"/>
        <property name="authenticator" ref="authenticator"/>
        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
<!--                <ref bean="secondRealm"/>-->
            </list>
        </property>
    </bean>

    <!--    配置cacheManager
            加入ehcache的jar包和配置文件
    -->
    <bean id="cacheManger" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!--    配置Realm
        直接配置实现了realm接口的bean
    -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
<!--                <ref bean="secondRealm"/>-->
            </list>
        </property>

        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"/>
        </property>
    </bean>

    <bean id="jdbcRealm" class="wang.l1n.realms.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>

    <!--    配置LifecycleBeanPostProcessor 可以自动地来调用配置在Spring IOC容器中 shiro bean地生命周期方法-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--    启用IOC容器中使用shiro的注解-->

    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--    配置shiroFilter
                1.
    -->

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/index.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>

        <property name="filterChainDefinitions">
            <value>
                <!--                anon：可以被匿名访问
                                    authc：必须认证后才能访问
                                    logout：登出
                                   -->
                /login.jsp = anon
                /shiro/login = anon
                /shiro/logout = logout


                /** = authc
            </value>
        </property>
    </bean>


    <!--事务控制的配置-->
    <!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
    <!--        &lt;!&ndash;控制住数据源&ndash;&gt;-->
    <!--        <property name="dataSource" ref="druidDataSource"/>-->
    <!--    </bean>-->

    <!--开启基于注解的事务,使用xml配置形式的事务（一般使用配置式的）-->
    <!--    <aop:config>-->
    <!--        <aop:pointcut id="txPoint" expression="execution(* wang.l1n.service..*(..))" />-->
    <!--配置事务-->
    <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>-->
    <!--    </aop:config>-->

    <!--配置事务增强，事务如何切入-->
    <!--<tx:advice id="txAdvice">-->
    <!--<tx:attributes>-->
    <!--&lt;!&ndash;所有方法都是事务方法&ndash;&gt;-->
    <!--<tx:method name="*"/>-->
    <!--&lt;!&ndash;以get开始的所有方法&ndash;&gt;-->
    <!--<tx:method name="get*" read-only="true"/>-->
    <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--Spring配置文件的核心点（数据源，mybatis整合，事务控制）-->

</beans>